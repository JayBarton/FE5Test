#version 330 core

in vec2 TextureCoordinates;

uniform sampler2D image;

uniform vec2 u_dimensions;
uniform vec2 u_border;
uniform vec4 spriteColor;
uniform vec4 bounds;

in vec2 FragPos;  


float map(float val, float oMin, float oMax, float nMin, float nMax) {
    return (val - oMin) / (oMax - oMin) * (nMax - nMin) + nMin;
}
float mapInside(float val, float min, float innerStart, float innerSize, float uDimensions, float uBorder) {
	float scale = uBorder / uDimensions;
	if(fract(val * scale) < uBorder)
	{
		return fract(min*scale);
	}
	if(fract(val*scale) > innerStart + innerSize)
	{
		return fract(min*scale);
	}
    return mod((val - min) * scale, innerSize) + innerStart; 
}
float processAxis(float val, float uBorder, float uDimensions) {
    if (val < uDimensions) {   // check if in near border
        return map(val, 0.0, uDimensions, 0.0, uBorder);
    }
    float farEdge = 1.0 - uDimensions;
    if (val >= farEdge) {  // check if in far border
        return map(val, farEdge, 1.0, 1.0 - uBorder, 1.0);
    }
    // must be in inside section of sprite
    return mapInside(val, uDimensions, uBorder, 1.0 - uBorder - uBorder, uDimensions, uBorder);
} 

void main(void) 
{
    vec2 newUV = vec2(
        processAxis(TextureCoordinates.x, u_border.x, u_dimensions.x),
        processAxis(TextureCoordinates.y, u_border.y, u_dimensions.y)
    );
	
	vec4 outColor = vec4(spriteColor) * texture2D(image, newUV);
	vec2 scaledPos = FragPos.xy * vec2(240, 64);
	if(scaledPos.y > 4 && scaledPos.y < 61)
	{
		if( scaledPos.y <= 8 || scaledPos.y > 57)
		{
			outColor.rgb += vec3(8.0f/255.0f);
		}
		else if(scaledPos.y <= 12 || scaledPos.y > 53)
		{
			outColor.rgb += vec3(16.0f/255.0f);
		}
		else if(scaledPos.y <= 16 || scaledPos.y > 49)
		{
			outColor.rgb += vec3(24.0f/255.0f);
		}
		else if(scaledPos.y <= 20 || scaledPos.y > 45)
		{
			outColor.rgb += vec3(32.0f/255.0f);
		}
		else if(scaledPos.y <= 45)
		{
			outColor.rgb += vec3(40.0f/255.0f);
		}
	}
	gl_FragColor = outColor;
	

}