#version 330 core
layout (location = 0) in vec2 vertex; 

out vec2 TextureCoordinates;

const int INSTANCE_COUNT = 100;
uniform int instanceOffset;

uniform vec4 uvs[INSTANCE_COUNT];
uniform mat4 model[INSTANCE_COUNT];
uniform vec4 spriteColor[INSTANCE_COUNT];
uniform float u_colorFactor[INSTANCE_COUNT];
uniform int paletteRow[INSTANCE_COUNT];
uniform float hitFactor[INSTANCE_COUNT];
uniform mat4 projection;

out vec4 c;
out float uc;
out float hf;
flat out int pr;

out vec3 FragPos;  

void main()
{
	int index = gl_InstanceID + instanceOffset;
	const vec2 position [6] = vec2[]
	(
		vec2(0.0f, 1.0f),
		vec2(1.0f, 0.0f),
		vec2(0.0f, 0.0f),

		vec2(0.0f, 1.0f),
		vec2(1.0f, 1.0f),
		vec2(1.0f, 0.0f)
	);
	
	vec4 uv =  uvs[index];
	
	vec2 uvCoords[6] = vec2[]
	(
		vec2(uv.x, uv.w),
		vec2(uv.y, uv.z),
		vec2(uv.x, uv.z),
		
		vec2(uv.x, uv.w),
		vec2(uv.y, uv.w),
		vec2(uv.y, uv.z)
	);
	c = spriteColor[index];
	uc = u_colorFactor[index];
	pr = paletteRow[index];
	hf = hitFactor[index];

	TextureCoordinates = uvCoords[gl_VertexID];
	FragPos = vec3(model[index] * vec4(position[gl_VertexID], 1.0f, 1.0f));
	gl_Position = projection * model[index] * vec4(position[gl_VertexID], 0.0, 1.0);
}