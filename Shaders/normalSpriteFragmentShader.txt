#version 330 core
in vec2 TextureCoordinates;
out vec4 color;

uniform sampler2D image;
uniform vec4 spriteColor;
uniform float subtractValue;


uniform float t;

uniform int fire;
// procedural noise from IQ
vec2 hash( vec2 p )
{
	p = vec2( dot(p,vec2(127.1,311.7)),
			 dot(p,vec2(269.5,183.3)) );
	return -1.0 + 2.0*fract(sin(p)*43758.5453123);
}

float noise( in vec2 p )
{
	const float K1 = 0.366025404; // (sqrt(3)-1)/2;
	const float K2 = 0.211324865; // (3-sqrt(3))/6;
	
	vec2 i = floor( p + (p.x+p.y)*K1 );
	
	vec2 a = p - i + (i.x+i.y)*K2;
	vec2 o = (a.x>a.y) ? vec2(1.0,0.0) : vec2(0.0,1.0);
	vec2 b = a - o + K2;
	vec2 c = a - 1.0 + 2.0*K2;
	
	vec3 h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );
	
	vec3 n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));
	
	return dot( n, vec3(70.0) );
}

float fbm(vec2 uv)
{
	float f;
	mat2 m = mat2( 1.6,  1.2, -1.2,  1.6 );
	f  = 0.5000*noise( uv ); uv = m*uv;
	f += 0.2500*noise( uv ); uv = m*uv;
	f += 0.1250*noise( uv ); uv = m*uv;
	f += 0.0625*noise( uv ); uv = m*uv;
	f = 0.5 + 0.5*f;
	return f;
}

void main()
{   
	if(fire == 0)
	{
		color = spriteColor * texture(image, TextureCoordinates);
		
		if(subtractValue > 0)
		{
			color -= vec4(vec3(subtractValue/255.0f), 0);
		}
	}
	else
	{
		vec4 original = texture(image, TextureCoordinates);
		if(original.a == 0)
		{
			discard;
		}
		vec2 uv = TextureCoordinates;
		vec2 fuck = uv * 10.0;
		vec2 you = floor(fuck * 10.0) / 10.0;
		vec3 _BrighterCol = vec3(1.0, 0.89, 0.35);
		vec3 _MiddleCol = vec3(1.0, 0.84, 0.01);
		vec3 _DarkerCol = vec3(1.0, 0.5, 0.1);
		float noiseValue = fbm(vec2(you.x, you.y + t)); //fire with scrolling
		float gradientValue = uv.y + 0.5;
		
		float step1 = step(noiseValue, gradientValue);
		float step2 = step(noiseValue, gradientValue-0.4);
		float step3 = step(noiseValue, gradientValue-0.8);	
	//	if(step1 == 0.0)
		{
	//		color = spriteColor;
		}
	//	else
		{
			color = vec4(mix(_BrighterCol.rgb, _DarkerCol.rgb, step1 - step2), step1 * 0.45f);

			color.rgb = mix(color.rgb, _MiddleCol.rgb, step2 - step3);	
			
		}
	//	color *= original;

		if(subtractValue > 0)
		{
			color -= vec4(vec3(subtractValue/255.0f), 0);
		}
	}
	
}  